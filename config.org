#+TITLE: MEGUMACS
#+AUTHOR: index
#+STARTUP: inlineimages
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup

[[./banners/megumacs2.png]]

#+begin_quote
Crimson-black blaze, king of myriad worlds, though I promulgate the laws of nature, I am the alias of destruction incarnate in accordance with the principles of creation. Let the hammer of eternity descend unto me! ... Burn to ashes within the crimson.
#+end_quote

#+begin_quote
Detonation... Detonation... Detonation... Wielder of the most glorious, powerful, and grand explosion magic, my name is Megumin. The blow that I am given to strike turns a blind eye to the fate of my kindred, rendering all hope of rebirth and anguish, and the model by which all forces are judged! Pitiful creature... Synchronize yourself with the red smoke, and atone in a surge of blood!
#+end_quote

#+begin_quote
Darkness blacker than black and darker than dark, I beseech thee, combine with my deep crimson. The time of awakening cometh. Justice, fallen upon the infallible boundary, appear now as an intangible distortion! Dance, Dance, Dance! I desire for my torrent of power a destructive force: a destructive force without equal! Return all creation to cinders, and come from the abyss!
#+end_quote

#+begin_quote
Oh, blackness shrouded in light Frenzied blaze clad in night In the name of the crimson demons, let the collapse of thine origin manifest. Summon before me the root of thy power hidden within the lands of the kingdom of demise!
#+end_quote

#+begin_quote
The tower of rebellion creeps upon man's world, The unspoken faith displayed before me, The time has come! Now, awaken from your slumber, and by my madness, be wrought!
#+end_quote

* Bootstrap
** Better defaults

   Disable mouse and tooltips:

   #+begin_src emacs-lisp
     (when window-system
       (blink-cursor-mode 0) ; Disable the cursor blinking
       (scroll-bar-mode 0)   ; Disable the scroll bar
       (tool-bar-mode 0)     ; Disable the tool bar
       (tooltip-mode 0))     ; Disable the tooltips
   #+end_src

   General better defaults:

   #+begin_src emacs-lisp
     (setq-default
      ad-redefinition-action 'accept                   ; Silence warnings for redefinition
      auto-window-vscroll nil                          ; Lighten vertical scroll
      confirm-kill-emacs 'yes-or-no-p                  ; Confirm before exiting Emacs
      cursor-in-non-selected-windows nil               ; Hide the cursor in inactive windows
      delete-by-moving-to-trash t                      ; Delete files to trash
      display-time-default-load-average nil            ; Don't display load average
      display-time-format "%H:%M"                      ; Format the time string
      fill-column 80                                   ; Set width for automatic line breaks
      help-window-select t                             ; Focus new help windows when opened
      indent-tabs-mode nil                             ; Stop using tabs to indent
      inhibit-startup-screen t                         ; Disable start-up screen
      initial-scratch-message ""                       ; Empty the initial *scratch* buffer
      mouse-yank-at-point t                            ; Yank at point rather than pointer
      ns-use-srgb-colorspace nil                       ; Don't use sRGB colors
      select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
      sentence-end-double-space nil                    ; End a sentence after a dot and a space
      show-help-function nil                           ; Disable help messages
      show-trailing-whitespace nil                     ; Display trailing whitespaces
      split-height-threshold nil                       ; Disable vertical window splitting
      split-width-threshold nil                        ; Disable horizontal window splitting
      tab-width 4                                      ; Set width for tabs
      uniquify-buffer-name-style 'forward              ; Uniquify buffer names
      window-combination-resize t                      ; Resize windows proportionally
      x-stretch-cursor t                               ; Stretch cursor to the glyph width
      delete-old-versions -1                           ; Delete excess backup versions silently
      version-control t                                ; Use version control
      ring-bell-function 'ignore                       ; Silent bell when you make a mistake
      inhibit-compacting-font-cache t                  ; Faster navigation point (costs more memory)
      recentf-mode t                                   ; Keep recent files
      make-backup-files nil                            ; Stop creating backup files
      display-line-numbers-type 'relative              ; Use relative line numbers
      vc-follow-symlinks t)                            ; Don't ask for confirmation when opening symlinked file
     (cd "~/")                                         ; Move to the user directory
     (global-display-line-numbers-mode t)              ; Enable line numbers globally
     (delete-selection-mode 1)                         ; Replace region when inserting text
     (display-time-mode 1)                             ; Enable time in the mode-line
     (global-auto-revert-mode 1)                       ; Automatically revert a buffer when it changes on disk
     (fringe-mode 0)                                   ; Disable fringes
     (electric-pair-mode t)                            ; Enable Matching delimeters
     (electric-indent-mode t)                          ; Auto indentation
     (fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
     (global-subword-mode 1)                           ; Iterate through CamelCase words
     (menu-bar-mode 0)                                 ; Disable the menu bar
     (mouse-avoidance-mode 'banish)                    ; Avoid collision of mouse with point
     (put 'downcase-region 'disabled nil)              ; Enable downcase-region
     (put 'upcase-region 'disabled nil)                ; Enable upcase-region
     (set-default-coding-systems 'utf-8)               ; Default to utf-8 encoding
   #+end_src

   Enable fullscreen.

   #+begin_src emacs-lisp
     (if (eq window-system 'ns)
         (toggle-frame-maximized)
       (toggle-frame-fullscreen))
   #+end_src

   Garbage collection on focus-out, Emacs /should/ feel snappier.

   #+begin_src emacs-lisp
     (add-hook 'focus-out-hook #'garbage-collect)
   #+end_src
   
   Always defer loading packages on startup.

** Load =.custom.el=

   One is able to use the customization interface that is bundled within Emacs. It
   is meant to help people who are not familiar with Emacs Lisp in the
   configuration of Emacs itself. By default, changes in the customization will be
   automatically detected and appended at the end of the configuration file,
   =init.el=.

   Since that in my case, the actual configuration file is a new one, crafted by
   =org-mode=, adding code at the end of =init.el= might mess things up. The
   following tells Emacs to add extra code in another file that would be then
   loaded, if existing.

   #+begin_src emacs-lisp
     (setq-default custom-file (expand-file-name ".custom.el" user-emacs-directory))
     (when (file-exists-p custom-file)
       (load custom-file))
   #+end_src

** Automatically update packages
   
   Update packages every week and delete the old versions.

   #+begin_src emacs-lisp
     (use-package auto-package-update
       :defer t
       :ensure t
       :commands update-packages
       :config
       (setq auto-package-update-delete-old-versions t)
       (auto-package-update-maybe))
   #+end_src

* Font

  - [[https://github.com/be5invis/Iosevka][Iosevka]]
  - [[https://github.com/belluzj/fantasque-sans][Fantasque Sans]]

  #+begin_src emacs-lisp
  (set-default-font "Iosevka 12")
  #+end_src
  
** Ligatures
   
   Rip off the ligatures from the Fira Code font.
   
   #+begin_src emacs-lisp
     (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol")

     (defconst fira-code-font-lock-keywords-alist
       (mapcar (lambda (regex-char-pair)
                 `(,(car regex-char-pair)
                   (0 (prog1 ()
                        (compose-region (match-beginning 1)
                                        (match-end 1)
                                        ;; The first argument to concat is a string containing a literal tab
                                        ,(concat "	" (list (decode-char 'ucs (cadr regex-char-pair)))))))))
               '(("\\(www\\)"                   #Xe100)
                 ("[^/]\\(\\*\\*\\)[^/]"        #Xe101)
                 ("\\(\\*\\*\\*\\)"             #Xe102)
                 ("\\(\\*\\*/\\)"               #Xe103)
                 ("\\(\\*>\\)"                  #Xe104)
                 ("[^*]\\(\\*/\\)"              #Xe105)
                 ("\\(\\\\\\\\\\)"              #Xe106)
                 ("\\(\\\\\\\\\\\\\\)"          #Xe107)
                 ("\\({-\\)"                    #Xe108)
                 ("\\(!!\\)"                    #Xe10d)
                 ("\\(!=\\)"                    #Xe10e)
                 ("\\(!==\\)"                   #Xe10f)
                 ("\\(-}\\)"                    #Xe110)
                 ("\\(--\\)"                    #Xe111)
                 ("\\(---\\)"                   #Xe112)
                 ("\\(-->\\)"                   #Xe113)
                 ("[^-]\\(->\\)"                #Xe114)
                 ("\\(->>\\)"                   #Xe115)
                 ("\\(-<\\)"                    #Xe116)
                 ("\\(-<<\\)"                   #Xe117)
                 ("\\(-~\\)"                    #Xe118)
                 ("\\(#{\\)"                    #Xe119)
                 ("\\(#\\[\\)"                  #Xe11a)
                 ("\\(##\\)"                    #Xe11b)
                 ("\\(###\\)"                   #Xe11c)
                 ("\\(####\\)"                  #Xe11d)
                 ("\\(#(\\)"                    #Xe11e)
                 ("\\(#\\?\\)"                  #Xe11f)
                 ("\\(#_\\)"                    #Xe120)
                 ("\\(#_(\\)"                   #Xe121)
                 ("\\(\\.=\\)"                  #Xe123)
                 ("\\(\\?=\\)"                  #Xe127)
                 ("\\(\\?\\?\\)"                #Xe128)
                 ("\\(;;\\)"                    #Xe129)
                 ("\\(/\\*\\)"                  #Xe12a)
                 ("\\(/\\*\\*\\)"               #Xe12b)
                 ("\\(/=\\)"                    #Xe12c)
                 ("\\(/==\\)"                   #Xe12d)
                 ("\\(/>\\)"                    #Xe12e)
                 ("\\(//\\)"                    #Xe12f)
                 ("\\(///\\)"                   #Xe130)
                 ("\\(&&\\)"                    #Xe131)
                 ("\\(||\\)"                    #Xe132)
                 ("\\(||=\\)"                   #Xe133)
                 ("[^|]\\(|=\\)"                #Xe134)
                 ("\\(|>\\)"                    #Xe135)
                 ("\\(\\^=\\)"                  #Xe136)
                 ("\\(\\$>\\)"                  #Xe137)
                 ("\\(\\+\\+\\)"                #Xe138)
                 ("\\(\\+\\+\\+\\)"             #Xe139)
                 ("\\(\\+>\\)"                  #Xe13a)
                 ("\\(=:=\\)"                   #Xe13b)
                 ("[^!/]\\(==\\)[^>]"           #Xe13c)
                 ("\\(===\\)"                   #Xe13d)
                 ("\\(==>\\)"                   #Xe13e)
                 ("[^=]\\(=>\\)"                #Xe13f)
                 ("\\(=>>\\)"                   #Xe140)
                 ("\\(<=\\)"                    #Xe141)
                 ("\\(=<<\\)"                   #Xe142)
                 ("\\(=/=\\)"                   #Xe143)
                 ("\\(>-\\)"                    #Xe144)
                 ("\\(>=\\)"                    #Xe145)
                 ("\\(>=>\\)"                   #Xe146)
                 ("[^-=]\\(>>\\)"               #Xe147)
                 ("\\(>>-\\)"                   #Xe148)
                 ("\\(>>=\\)"                   #Xe149)
                 ("\\(>>>\\)"                   #Xe14a)
                 ("\\(<\\*\\)"                  #Xe14b)
                 ("\\(<\\*>\\)"                 #Xe14c)
                 ("\\(<|\\)"                    #Xe14d)
                 ("\\(<|>\\)"                   #Xe14e)
                 ("\\(<\\$\\)"                  #Xe14f)
                 ("\\(<\\$>\\)"                 #Xe150)
                 ("\\(<!--\\)"                  #Xe151)
                 ("\\(<-\\)"                    #Xe152)
                 ("\\(<--\\)"                   #Xe153)
                 ("\\(<->\\)"                   #Xe154)
                 ("\\(<\\+\\)"                  #Xe155)
                 ("\\(<\\+>\\)"                 #Xe156)
                 ("\\(<=\\)"                    #Xe157)
                 ("\\(<==\\)"                   #Xe158)
                 ("\\(<=>\\)"                   #Xe159)
                 ("\\(<=<\\)"                   #Xe15a)
                 ("\\(<>\\)"                    #Xe15b)
                 ("[^-=]\\(<<\\)"               #Xe15c)
                 ("\\(<<-\\)"                   #Xe15d)
                 ("\\(<<=\\)"                   #Xe15e)
                 ("\\(<<<\\)"                   #Xe15f)
                 ("\\(<~\\)"                    #Xe160)
                 ("\\(<~~\\)"                   #Xe161)
                 ("\\(</\\)"                    #Xe162)
                 ("\\(</>\\)"                   #Xe163)
                 ("\\(~@\\)"                    #Xe164)
                 ("\\(~-\\)"                    #Xe165)
                 ("\\(~=\\)"                    #Xe166)
                 ("\\(~>\\)"                    #Xe167)
                 ("[^<]\\(~~\\)"                #Xe168)
                 ("\\(~~>\\)"                   #Xe169)
                 ("\\(%%\\)"                    #Xe16a)
                 ("[^\\+<>]\\(\\+\\)[^\\+<>]"   #Xe16d)
                 ("[^\\*/<>]\\(\\*\\)[^\\*/<>]" #Xe16f))))

     (defun add-fira-code-symbol-keywords ()
       (font-lock-add-keywords nil fira-code-font-lock-keywords-alist))

     (add-hook 'prog-mode-hook
               #'add-fira-code-symbol-keywords)
   #+end_src

* Themes
** [[https://github.com/ogdenwebb/emacs-kaolin-themes][Kaolin themes]]
   
   Set of eye pleasing themes for GNU Emacs. Supports both GUI and terminal.

   #+begin_src emacs-lisp
     (use-package kaolin-themes
       :config
       (load-theme 'kaolin-bubblegum)
       (setq kaolin-themes-bold t
             kaolin-themes-italic t
             kaolin-themes-underline t
             kaolin-themes-distinct-company-scrollbar t))
   #+end_src
  
** [[https://github.com/hlissner/emacs-doom-themes][Doom themes]]
   
  An opinionated pack of modern color-themes 

   #+begin_src emacs-lisp
     ;; (use-package doom-themes
     ;;   :ensure t
     ;;   :config
     ;;   (load-theme 'doom-nord)
     ;;   (setq doom-themes-enable-bold t
     ;;         doom-themes-enable-italic t))
   #+end_src

** [[https://github.com/domtronn/all-the-icons.el][All the icons]]

   Adds fancy icons to emacs.

   #+begin_src emacs-lisp
     (use-package all-the-icons
       :ensure t)
   #+end_src

* Modeline
** [[https://github.com/TheBB/spaceline][Spaceline]]
   
   Powerline theme from Spacemacs.
   
   #+begin_src emacs-lisp
     ;; (use-package spaceline
     ;;   :ensure t
     ;;   :init
     ;;   (progn
     ;;     (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
     ;;     (setq-default powerline-default-separator 'slant)
     ;;     ;; (setq spaceline-separator-dir-left '(right . right))
     ;;     )
     ;;   :config
     ;;   (spaceline-emacs-theme)
     ;;   (setq spaceline-buffer-encoding-abbrev-p nil
     ;;         spaceline-workspace-number-p t
     ;;         spaceline-window-numbers-unicode nil
     ;;         spaceline-version-control-p nil
     ;;         spaceline-minor-modes-p nil
     ;;         spaceline-major-mode-p nil
     ;;         spaceline-buffer-size-p t
     ;;         spaceline-window-number-p t
     ;;         spaceline-buffer-id-p t
     ;;         spaceline-buffer-size-p t)
     ;;   (powerline-reset))
   #+end_src

** [[https://github.com/seagle0128/doom-modeline][Doom-modeline]]
   
   A fancy and fast mode-line inpsired by minimalism design.

   #+begin_src emacs-lisp
     (use-package doom-modeline
       :ensure t
       :config
       (setq doom-modeline-major-mode-icon nil
             doom-modeline-major-mode-color-icon nil
             doom-modeline-icon (display-graphic-p)
             doom-modeline-buffer-modification-icon nil
             doom-modeline-flycheck-icon nil
             doom-modeline-checker-simple-format t
             doom-modeline-buffer-encoding nil)
       (doom-modeline-mode))
   #+end_src

* Dashboard
** [[https://github.com/emacs-dashboard/emacs-dashboard][emacs-dashboard]]
   
   An extensible emacs startup screen showing you what’s most important.

  #+begin_src emacs-lisp
    (use-package dashboard
      :ensure t
      :init
      (setq dashboard-banner-logo-title "[M E G U M A C S]"
            dashboard-startup-banner (expand-file-name "banners/megumacs.png" user-emacs-directory)
            dashboard-footer "EXPLOOOOOOOOOOSIONNN!"
            dashboard-footer-icon (all-the-icons-wicon "meteor" :height 1.1 :v-adjust -0.05 :face 'font-lock-keyword-face)
            dashboard-center-content t
            dashboard-set-heading-icons t
            dashboard-set-file-icons t
            dashboard-set-navigator t)
      (setq dashboard-navigator-buttons
            `(((,(all-the-icons-octicon "octoface" :height 1.1 :v-adjust 0.0)
                "Homepage"
                "Browse homepage"
                (lambda (&rest _) (browse-url "https://github.com/0-l/megumacs")))
               (,(all-the-icons-faicon "refresh" :height 1.1 :v-adjust 0.0)
                "Update"
                "Update Megumacs"
                (lambda (&rest _) (update-packages)) warning)
               ("⚑"
                nil
                "Report BUG"
                (lambda (&rest _) (browse-url "https://github.com/0-l/megumacs/issues/new")) error))))
      :config
      (dashboard-setup-startup-hook))
  #+end_src

* Auto completion
** [[https://github.com/company-mode/company-mode][Company]]
   
   Modular in-buffer completion framework.

  #+begin_src emacs-lisp
    (use-package company
      :defer 5
      :ensure t
      :init (global-company-mode)
      :config
      (add-to-list 'company-backends
                   '(company-lsp
                     company-yasnippet
                     company-capf
                     company-dabbrev))
      (setq company-show-numbers t
	    company-alignip-align-annotations t))
  #+end_src
   
** [[https://github.com/tigersoldier/company-lsp][Company/lsp]]
   
   Company completion backend for =lsp-mode=
   
   #+begin_src emacs-lisp
    (use-package company-lsp
      :ensure t
      :requires company
      :commands company-lsp
      :config
      (setq company-transformers nil
            company-lsp-async t
            company-lsp-cache-candidates nil))
   #+end_src

* Evil

  Evil is an extensible vi layer for Emacs. It emulates the main features of Vim, and provides facilities for writing custom extensions.
  
** [[https://github.com/emacs-evil/evil][evil-mode]]
   
   Base package for =evil-mode=

  #+begin_src emacs-lisp
    (use-package evil
      :ensure t
      :init
      (setq evil-want-keybinding nil
            evil-want-C-u-scroll t)
      :config
      (evil-mode 1))
  #+end_src
  
** [[https://github.com/syl20bnr/evil-escape][evil-escape]]

   Unfortunately we need a separate package to handle custom <ESC> key sequences.
   #+begin_src emacs-lisp
    (use-package evil-escape
      :ensure t
      :init
      (setq-default evil-escape-key-sequence "jk")
      :config
      (evil-escape-mode))
   #+end_src
  
** [[https://github.com/emacs-evil/evil-magit][evil-magit]]

   Evil keybinding integration in magit.
   #+begin_src emacs-lisp
    (use-package evil-magit
      :ensure t
      :after evil magit
      :config
      (evil-magit-init))
   #+end_src

** [[https://github.com/emacs-evil/evil-surround][evil-surround]]

   Useful package for adding, editing or removing all types of surrounding characters (even HTML tags!).
   #+begin_src emacs-lisp
    (use-package evil-surround
      :ensure t
      :after evil
      :config
      (global-evil-surround-mode 1))
   #+end_src
  
** [[https://github.com/gabesoft/evil-mc][evil-mc]]

   Multiple cursors implementation for evil-mode.
   #+begin_src emacs-lisp
    (use-package evil-mc
      :ensure t
      :after evil
      :init
      (global-evil-mc-mode 1))
   #+end_src
  
** [[https://github.com/linktohack/evil-commentary][evil-commentary]]
  
   Evil bindings for commenting out chunks of code. 
   #+begin_src emacs-lisp
    (use-package evil-commentary
      :ensure t
      :config
      (evil-commentary-mode))
   #+end_src
    
* Keybindings
** [[https://github.com/noctuid/general.el][General]]
   
   More convenient key definitions.

   #+begin_src emacs-lisp
     (use-package general
       :ensure t
       :config
       (general-evil-setup t)
       (define-key evil-motion-state-map " " nil)
       (general-evil-define-key 'normal 'global
         :prefix "SPC"
         ;; Misc
         "SPC" 'counsel-M-x
         "TAB" 'mode-line-other-buffer
         "." 'xref-find-definitions
         "," 'xref-pop-marker-stack
         "'" 'eshell
         "qq" 'evil-quit
         "s" 'swiper
         ;; Applications
         "a" '(:ignore t :which-key "applications")
         "au" 'undo-tree-visualize
         "aU" 'update-packages
         ;; Buffers
         "b" '(:ignore t :which-key "buffers")
         "bb" 'counsel-switch-buffer
         "bd" 'kill-this-buffer
         "bp" 'previous-buffer
         "bn" 'next-buffer
         "be" 'erase-buffer
         ;; Compiling
         "c" 'compile
         ;; Errors
         "e" '(:ignore t :which-key "errors")
         ;; Files
         "f" '(:ignore t :which-key "file")
         "ff" 'find-file
         "fr" 'counsel-recentf
         "fs" 'save-buffer
         "fS" 'evil-write-all
         "fR" 'rename-file
         "fb" 'ranger-show-bookmarks
         ;; Focus
         "F" '(:ignore t :which-key "focus")
         ;; LSP
         "l" '(:ignore t :which-key "language")
         ;; Projects
         "p" '(:ignore t :which-key "project")
         ;; Toggles
         "t" '(:ignore t :which-key "toggles")
         "tn" 'display-line-numbers-mode
         "tL" 'visual-line-mode
         "tu" 'lsp-ui-mode
         ;; Themes
         "T" '(:ignore t :which-key "themes")
         "Ts" 'counsel-load-theme
         ;; Windows
         "w" '(:ignore t :which-key "window")
         "wm" 'delete-other-windows
         "wf" 'delete-other-windows
         "wj" 'evil-window-down
         "wk" 'evil-window-up
         "wl" 'evil-window-right
         "wh" 'evil-window-left
         ;; "ws" 'evil-window-split
         ;; "wv" 'evil-window-vsplit
         "ws" 'split-and-follow-horizontally
         "wv" 'split-and-follow-vertically
         "wd" 'evil-window-delete
         "wc" 'evil-window-delete
         "wH" 'evil-window-move-far-left
         "wL" 'evil-window-move-far-right
         "wK" 'evil-window-move-very-top
         "wJ" 'evil-window-move-very-bottom
         "w=" 'balance-windows))
   #+end_src

** [[https://github.com/justbur/emacs-which-key][Which-key]]
   
   Package that displays available keybindings in a popup.

   #+begin_src emacs-lisp
    (use-package which-key
      :defer 5
      :ensure t
      :config
      (which-key-mode))
   #+end_src

* Source Control
** [[https://github.com/magit/magit][Magit]]

   General source control package. Has a nice interface for every git operation there is.

   #+begin_src emacs-lisp
     (use-package magit
       :ensure t
       :general
       (nmap
         :prefix "<SPC>"
         "g" '(nil :which-key "magit")
         "gs" 'magit-status
         "gb" 'magit-blame))
   #+end_src

** [[https://github.com/syohex/emacs-git-gutter-fringe][Git Gutter]]

   Commit diff and other repo informations. Has the capability to stage hunks and what-not.
   
   #+begin_src emacs-lisp
  (use-package git-gutter-fringe+
    :ensure t
    :config
    (git-gutter-fr+-minimal)
    (setq git-gutter-fr+-side 'left-fringe))
   #+end_src

* File management
** [[https://github.com/ralesi/ranger.el][Ranger]]
   
   Bringing the goodness of ranger to dired!

   #+begin_src emacs-lisp
     (use-package ranger
       :ensure t
       :defer t
       :general
       (nmap
         :prefix "SPC"
         "ar" 'ranger
         "ad" 'deer)
       :config
       (ranger-override-dired-mode t))
   #+end_src

* Project Management
** [[https://github.com/Alexander-Miller/treemacs][Treemacs]]

   A tree layout file explorer.

   #+begin_src emacs-lisp
     (use-package treemacs
       :ensure t
       :defer t
       :general
       (nmap
         :prefix "<SPC>"
         "tt" 'treemacs)
       :config
       (setq treemacs-no-png-images t
             treemacs-width 25))

     (use-package treemacs-evil
       :ensure t)
   #+end_src

** [[https://github.com/bbatsov/projectile][Projectile]]
   
   Project interaction library.
   
   #+begin_src emacs-lisp
     (use-package projectile
       :ensure t
       :defer t
       :config
       (projectile-mode)
       (setq projectile-enable-caching t))
   #+end_src
   
*** [[https://github.com/ericdanan/counsel-projectile][projectile/counsel]]
    
    =ivy= UI for Projectile.

    #+begin_src emacs-lisp
     (use-package counsel-projectile
       :ensure t
       :general
       (nmap
         :prefix "<SPC>"
         "pp" 'counsel-projectile-switch-project
         "pf" 'counsel-projectile-find-file
         "ps" 'counsel-projectile-git-grep
         "pd" 'counsel-projectile-find-dir))
    #+end_src
   
* Syntax Checking
** [[https://github.com/flycheck/flycheck][Flycheck]]
   
   Modern on-the-fly syntax checking extension.

   #+begin_src emacs-lisp
    (use-package flycheck
      :ensure t
      :hook (prog-mode . flycheck-mode)
      :general
      (nmap
        :prefix "<SPC>"
        "en" 'flycheck-next-error
        "ep" 'flycheck-previous-error))
   #+end_src

* Language modes
** [[https://github.com/rust-lang/rust-mode][Rust]]

   #+begin_src emacs-lisp
    (use-package rust-mode
      :ensure t)
   #+end_src

** Ruby
   
   #+begin_src emacs-lisp
     (use-package ruby-mode
       :ensure t)
   #+end_src

** Javascript
*** [[https://github.com/mooz/js2-mode][js2-mode]]
    
    Improved Javascript editing mode.
    
    #+begin_src emacs-lisp
     (use-package js2-mode
       :ensure t
       :init
       (setq-default js-indent-level 2
                     js2-basic-offset 2))
    #+end_src
   
*** [[https://github.com/felipeochoa/rjsx-mode][rjsx-mode]]
    
    A JSX major mode.

    #+begin_src emacs-lisp
     (use-package rjsx-mode
       :ensure t)
    #+end_src

** [[https://github.com/emacs-typescript/typescript.el][Typescript]]
   
   TypeScript support for Emacs.

   #+begin_src emacs-lisp
     (use-package typescript-mode
       :ensure t)
   #+end_src

** [[https://github.com/fxbois/web-mode][Web]]
   
   Web template editing mode.
   
   #+begin_src emacs-lisp
  (use-package web-mode
    :ensure t
    :config
    (setq web-mode-code-indent-offset 2
          web-mode-markup-indent-offset 2))
   #+end_src

* Language Server Protocol
** [[https://github.com/emacs-lsp/lsp-mode][LSP]]

   =lsp-mode= aims to provide IDE-like experience by providing optional integration with the most popular Emacs packages like =company=, =flycheck= and =projectile=.

   #+begin_src emacs-lisp
    (use-package lsp-mode
      :ensure t
      :general
      (nmap
        :prefix "<SPC>"
        "lF" 'lsp-format-buffer
        "lR" 'lsp-rename)
      :hook ((js2-mode        . lsp-deferred)
             (js-mode         . lsp-deferred)
             (rjsx-mode       . lsp-deferred)
             (typescript-mode . lsp-deferred)
             (rust-mode       . lsp-deferred)
             (ruby-mode       . lsp-deferred))
      :commands (lsp lsp-deferred))
   #+end_src
   
*** [[https://github.com/emacs-lsp/lsp-ui][LSP-UI]]
    
    Higher level UI modules of =lsp-mode=.
   
   #+begin_src emacs-lisp
    (use-package lsp-ui
      :ensure t
      :after lsp-mode
      :commands lsp-ui-mode
      :hook (lsp-mode . lsp-ui-mode)
      :general
      (nmap
        :prefix "<SPC>"
        "li" 'lsp-ui-peek-find-implementation
        "lr" 'lsp-ui-peek-find-references
        "ld" 'lsp-ui-peek-find-definitions
        "ll" 'lsp-ui-flycheck-list
        "la" 'lsp-ui-sideline-apply-code-actions)
      :config
      (setq lsp-ui-doc-enable t
            lsp-ui-sideline-enable t
            lsp-ui-flycheck-enable t
            lsp-ui-flycheck-live-reporting t
            lsp-ui-sideline-toggle-symbols-info t
            lsp-ui-sideline-show-hover t
            lsp-ui-peek-enable t))
   #+end_src

* Buffers and Windows
** [[https://github.com/deb0ch/emacs-winum][Winum]]
   
   Numbering for buffers, windows and =eyebrowse= workspaces.

   #+begin_src emacs-lisp
     (use-package winum
       :ensure t
       :init
       (setq winum-auto-setup-mode-line nil)
       :config
       (winum-mode))
   #+end_src

** [[https://github.com/wasamasa/eyebrowse][Eyebrowse]]
   
   A simple-minded way of managing window configs in emacs.

   #+begin_src emacs-lisp
  (use-package eyebrowse
    :ensure t
    :general
    :config
    (eyebrowse-mode)
    (eyebrowse-setup-opinionated-keys))
   #+end_src

** Focus on newly created windows
   
   #+begin_src emacs-lisp
      (defun split-and-follow-horizontally ()
         (interactive)
         (split-window-below)
         (balance-windows)
         (other-window 1))

      (defun split-and-follow-vertically ()
         (interactive)
         (split-window-right)
         (balance-windows)
         (other-window 1))
   #+end_src

* Navigation
** [[https://github.com/abo-abo/swiper][Ivy]]
   
   =avy= is similar to Vim's easymotion plugin, it provides commands for jumping to visible text using a char-based decision tree.

   #+begin_src emacs-lisp
    (use-package ivy
      :ensure t
      :general
      (nmap
        :prefix "<SPC>"
        ";" 'avy-goto-word-1
        ":" 'avy-goto-char)
      :config
      (global-set-key "\C-s" 'swiper)
      (setq ivy-count-format "(%d/%d) "
            avy-background t)
      (ivy-mode))

    (use-package ivy-rich
      :ensure t
      :after ivy
      :init
      (ivy-rich-mode 1)
      :config
      (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line))
   #+end_src

** [[https://github.com/abo-abo/swiper][Ivy/Counsel]]
   
   Completion frontend for things such as =M-x find-file=. 

   #+begin_src emacs-lisp
  (use-package counsel
    :ensure t)
   #+end_src

* Editing
** [[https://github.com/larstvei/Focus][Focus]]
   
   Dim the font color of text in surrounding paragraphs.

   #+begin_src emacs-lisp
     (use-package focus
       :defer t
       :ensure t
       :general
       (nmap
         :prefix "<SPC>"
         "tf" 'focus-mode
         "Fp" 'focus-pin
         "Fu" 'focus-unpin
         "Fc" 'focus-change-thing))
   #+end_src

* Templates
** [[https://github.com/joaotavora/yasnippet][Yasnippet]]
   
   A snippet template system.

   #+begin_src emacs-lisp
    (use-package yasnippet
      :ensure t
      :init
      (yas-global-mode 1)
      :config
      (setq yas-prompt-functions 'yas-ido-prompt))
   #+end_src

*** [[https://github.com/AndreaCrotti/yasnippet-snippets][Yasnippet/snippets]]
    
    A collection of =yasnippet= snippets for many languages

    #+begin_src emacs-lisp
    (use-package yasnippet-snippets
      :after yasnippet
      :ensure t)
    #+end_src
